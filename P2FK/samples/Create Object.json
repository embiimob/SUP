{
  "urn": "66e5f4df4bd0a3ea9b569498ed25f848e837b9dec7a2699c1d6756ae9560c962/8354.png",
  "img": "66e5f4df4bd0a3ea9b569498ed25f848e837b9dec7a2699c1d6756ae9560c962/8354.png",
  "uri": "ETH:0xc1caf0c19a8ac28c41fe59ba6c754e4b9bd54de9/8354",
  "nme": "CryptoSkull #8354",
  "dsc": "**CryptoSkulls** are 10,000 collectible ERC-721 Non-Fungible Tokens stored on Ethereum / Polygon blockchains. Each CryptoSkull character is a unique pixel art image. OG NFT project from **2019**. Visit [cryptoskulls.com](https://cryptoskulls.com) for more details. Grab your color madness!",
  "atr": {
    "Background ID": "114",
    "Beard Gene": "8",
    "Bones Gene": "#114",
    "Eyes Gene": "17",
    "Hair Gene": "75",
    "NAME": "Thuguuth",
    "Nose Gene": "4",
    "Skull Gene": "2",
    "Teeth Gene": "10",
    "UNIQUENESS INDEX": "22"
  },
  "lic": "NOT OFFICIAL - DEMONSTRATION ONLY",
  "cre": [ 0 ],
  "own": { "0": 1 }
}


//assume keyword order id 0 is the authorization address
//"cre": [ 0, 1 ] assume keyword order id 0 is the object address, keyword order id 1 is a creator address
//"own": { 0: 10000 } assume keyword order id 0 owns a qty of 10000


//remove all unnecessary spaces
//place JSON in a file named OBJ (no file extension)
//enter #[first 20 charachters of urn] to create a URN registration in this example #66e5f4df4bd0a3ea9b56 in the apertus.io message box
//enter each additional @creatoraddress and or @owneraddress above the @objectaddress in the apertus.io message box in matching orders
//in this example keyword order id 1 would be the second from the bottom if the #66e5f4df4bd0a3ea9b56 URN was also being registered
//attach file OBJ using the apertus.io attach button
//create a new signature address in the signature list in apertus.io. select it.  this will be the object address
//verify that the no message box is checked.
//click the apertus.io etch button


// confirm creator deligation transaction example with numeric salt

{"cre":[1234]}



